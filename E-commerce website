// This is a single-file backend server for a simple e-commerce API.
// It uses Express.js and Mongoose to connect to MongoDB and handle product data.

const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
require('dotenv').config(); // Make sure to install dotenv and create a .env file

const app = express();
const PORT = process.env.PORT || 5000;

// --- Middleware ---
app.use(express.json()); // Parses incoming JSON requests
app.use(cors());         // Allows cross-origin requests from your frontend

// --- Database Connection ---
// Replace the URI with your MongoDB connection string.
// You can get this from MongoDB Atlas.
const MONGO_URI = process.env.MONGO_URI || 'mongodb://localhost:27017/my-ecommerce-db';

mongoose.connect(MONGO_URI)
  .then(() => console.log('MongoDB connected successfully'))
  .catch(err => console.error('MongoDB connection error:', err));

// --- Mongoose Model Definition ---
const productSchema = new mongoose.Schema({
  name: { type: String, required: true },
  price: { type: Number, required: true },
  image: { type: String, required: true },
  description: { type: String, required: false }
});
const Product = mongoose.model('Product', productSchema);

// --- API Routes ---

// Route to get all products
app.get('/api/products', async (req, res) => {
  try {
    const products = await Product.find({});
    res.json(products);
  } catch (err) {
    res.status(500).json({ message: 'Server error' });
  }
});

// Route to get a single product by ID
app.get('/api/products/:id', async (req, res) => {
  try {
    const product = await Product.findById(req.params.id);
    if (!product) {
      return res.status(404).json({ message: 'Product not found' });
    }
    res.json(product);
  } catch (err) {
    res.status(500).json({ message: 'Server error' });
  }
});

// Route to create a new product (for testing)
app.post('/api/products', async (req, res) => {
  const { name, price, image, description } = req.body;
  try {
    const newProduct = new Product({ name, price, image, description });
    const createdProduct = await newProduct.save();
    res.status(201).json(createdProduct);
  } catch (err) {
    res.status(400).json({ message: 'Error creating product' });
  }
});

// --- Server Start ---
app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));
